open Effppl.Infer;;
open Effppl.Print;; 

let truncated_data obs_points ay () = 
	let* mu = normal ay.(0) 5. in 
	let* si = exp 5.0  in 

	for i = 0 to (obs_points-1) do 
		observe (mk ay.(i)) 
		(fun x -> 
			(Effppl.Primitive.logpdf Effppl.Primitive.(normal (get mu) (get si))) x 
		)
	done ;
	mu

in 

let epochs = 20000 in 
let ly = [0.5035125378408197 ;0.6865707866448125 ;-0.9873517225941929 ;0.6083112221512497 ;0.9220931603354896 ;0.3472926368529922 ;-0.28166229387923075 ;1.0921147674115455 ;-0.5889333635606973 ;-0.14040860784333184 ;0.26759922700513716 ;-0.5764890411122108 ;-0.0284369133971777 ;-0.9877859479426827 ;0.5545774837750013 ;0.81826542894526 ;0.771126972646986 ;0.2943532635339896 ;0.8791255384353288 ;-0.27449801621295666 ;-2.3104086912539485 ;-0.6236812099927209 ;-0.22891979200495327 ;1.7891672406595505 ;2.6307419052377843 ;0.4500282674874636 ;1.3459834149324486 ;1.332011376261097 ;0.3621439521521748 ;-2.697774055248289 ;0.49319182422684255 ;1.6433880507257308 ;2.0283429640527455 ;0.8668158592743694 ;0.6462290391584519 ;0.40824236765954974 ;-0.3337170994964673 ;-0.9360714698964999 ;0.8094603557619061 ;-0.2539886578417221 ;1.1295550035770459 ;-0.16215503261821873 ;-0.06622074943229303 ;0.2118674877966059 ;-0.6422204023262835 ;-0.4240176964468072 ;-1.575005010930429 ;-0.13254906645653622 ;-0.3888168020256145 ;1.4942313282645048 ;-0.6071127644808642 ;0.3055647783858318 ;-0.35356425487042953 ;1.4894029813065364 ;-2.7909673020334695 ;0.258661770729707 ;-0.8163491003666632 ;0.9348266850225989 ;0.7989307962625453 ;-0.037994815044980694 ;-1.561177308417143 ;0.7133360196541254 ;0.367895290106728 ;0.17180956281031284 ;-0.5868634307101126 ;1.0184873117239015 ;-0.6797356466823913 ;-0.07035414302198431 ;-0.1087471759990871 ;0.3397313524207033 ;0.7198229787346306 ;1.6138527003149006 ;-0.9464729247168637 ;2.2923648986588 ;-0.6336233277213368 ;0.1589474911656553 ;0.643675483215107 ;-0.7774530113114351 ;-0.2203180721792877 ;0.005121229429338485 ;0.1549837154166777 ;0.45836542783168926 ;1.075070340331853 ;1.4949091043846168 ;-1.5909717855641496 ;-0.37828839427620586 ;-1.3190589018925432 ;-0.1109681148103661 ;-0.8982321761272312 ;-0.19069661435793425 ;-1.0244397133515133 ;1.0318008688588909 ;-0.41336696827128605 ;-0.9127280218132503 ;-1.5468981463437848 ;0.5921615394174276 ;-0.8470702726674159 ;0.4925707748686937 ;0.2436093402971685 ;-1.7169510305000335 ] in 
let ay = Array.of_list ly in 
let fils = (hmc (truncated_data (List.length ly) ay) 4 0.02 epochs) in

let mcl = List.map (fun ls -> (List.nth ls 0, List.nth ls 1)) fils in 
let sm =  List.map (fun (ax, _) -> ax) mcl in  
let sma =  Array.of_list sm in  
let sc =  List.map (fun (_, ay) -> ay) mcl in  
let sca =  Array.of_list sc in  

let _ = Owl_stats.mean sma in 
let _ = Owl_stats.mean sca in

print_statistics sm;
print_to_file sm "mean";
(* print_normal_list sm; *)

print_statistics sc;
print_to_file sc "stdev";
(* print_normal_list sc; *)

