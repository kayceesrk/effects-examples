open Effppl.Infer
open Effppl.Print 

(*
	autoregressor model for time series analysis
	A first-order autoregressive model (AR(1)) with normal noise 
	takes each point y(n) in a sequence to be generated according to
		y(n) ~ Normal ( alpha + beta.y(n-1), sigma)
*)
let autoreg obs_points ay () =
	let* alp = normal 1. 1. in 
	let* bet = normal 1. 1. in 
	let* l2 = (mk 0.) in
	for i = 0 to (obs_points-2) do 
		observe ((mk ay.(i+1)) -. alp -. bet*.(mk ay.(i))) (Effppl.Primitive.logpdf Effppl.Primitive.(normal 0. 2.))
	done ;
	l2
;; 

(*
	We generate the data with beta = 1.05
	and alpha = 2
*)
let epochs = 100000 in
let ls = [1.0 ;1.2320613063764592 ;1.9585770907909534 ;2.0930247266046083 ;2.6551702667329096 ;3.065075080830876 ;3.7312642053934053 ;4.345410556461873 ;5.083571003339128 ;5.5055989519614545 ;6.332218201652796 ;6.759122837518092 ;7.54908563614472 ;8.420332752375584 ;9.066041604178707 ;10.055355327221786 ;10.792420994965932 ;11.73174348596572 ;12.505886336502183 ;13.219138849522611 ;13.695668727068027 ;14.508297823181703 ;15.712550093392215 ;16.626603178164334 ;17.482808361256545 ;18.137265842412912 ;19.080524444754 ;20.147932341229627 ;21.452163517651183 ;22.194938096857225 ;22.997484443406513 ;24.504528880967992 ;25.60254769658472 ;26.807507360628286 ;28.166216607142182 ;29.761991769684577 ;30.792050930559896 ;32.12147681978347 ;33.592668412254945 ;35.22601897874637 ;36.65702809678781 ;38.29070116120318 ;39.92489807807332 ;41.45380089715547 ;43.24720903583228 ;44.67511353090412 ;46.266804879581244 ;48.1613502901185 ;49.64791750864015 ;51.62214196895799 ;53.70523034764119 ;56.05826656095486 ;58.40214246884833 ;60.395513160654005 ;62.90228662464813 ;65.45366795544115 ;67.87454665884323 ;70.37322543502032 ;73.16880346477195 ;75.81885119043785 ;78.78667714833574 ;82.01522624075162 ;84.96258284051851 ;87.9786863008063 ;91.36112416343889 ;94.47781609982194 ;98.13991961806175 ;101.68958114389278 ;105.31547528695971 ;108.71295488662689 ;112.56501041414798 ;116.55195791853319 ;120.55431022145586 ;124.232176230144 ;128.54334319903285 ;133.15776892186992 ;137.8253520958948 ;142.47530131755147 ;147.40941211881145 ;152.45993724401262 ;157.9532243579649 ;163.3371328901355 ;168.63739402184717 ;174.43685840538146 ;180.15681785174047 ;186.1027304120564 ;191.97318376261697 ;197.95503954756583 ;204.42781377363892 ;210.77507762752649 ;217.53467610677828 ;224.52836651685877 ;231.57323152436157 ;239.133499581524 ;246.71252807821233 ;254.5126785133703 ;262.8543348573397 ;271.29298403343137 ;279.8383321124938 ;288.5513701011165 ;297.62065286944846 ]in
let ax = Array.of_list ls in 
let obs = Array.length ax in 
let fils = (hmc (autoreg obs ax) 5 0.0001 epochs) in

let mcl = List.map (fun ls -> (List.nth ls 0, List.nth ls 1)) fils in 
let sm =  List.map (fun (ax, _) -> ax) mcl in  
let sc =  List.map (fun (_, ay) -> ay) mcl in  

print_endline "===============================\nPrinting statistics for alpha\n===============================";
print_statistics sm;
print_endline "===============================\nPrinting statistics for beta\n===============================";
print_statistics sc;

print_to_file sm "autoreg_alpha.txt"; 
print_to_file sc "autoreg_beta.txt";
(*
	The beta converges fast, but the alpha requires a lot of data, because of its lower relevance.
*)
(* print_normal_list sm; *)