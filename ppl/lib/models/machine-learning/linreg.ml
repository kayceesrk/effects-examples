open Effppl;;
open Effppl.Primitive;;
open Effppl.Infer;;
open Effppl.Print;; 

(*
	Used to generate randomness in the dataset
*)
let nrm () =
	let* x = normal 0. 0.5 in 
	x
;; 

(*
	The linear regression model
*)
let lin obs_points ax ay () =
	(*Some priors we know *)
	let* m = normal 2. 3. in 
	let* c = normal 1. 5. in 

	(*Observations*)
	for i = 0 to (obs_points-1) do 
		observe (mk ay.(i) -. m*.mk ax.(i) -. c) (logpdf Primitive.(normal 0. 3.))
	done ;
	m
;; 

(*setting constants*)
let epochs = Stdlib.int_of_string (Sys.argv.(1)) in

(*Creating the necessary x and y data*)
let lx = [ 5.163986277024462 ; 5.706675868681398 ; 0.2847422647809694 ; 1.7152165622510307 ; 6.852769816973126 ; 8.338968626360765 ; 3.069662196722378 ; 8.936130796833973 ; 7.215438617683047 ; 1.8993895420479678 ; 5.542275911247872 ; 3.5213195402661412 ; 1.8189240266007867 ; 7.856017618643588 ; 9.654832224119692 ; 2.3235366181476067 ; 0.8356143366334368 ; 6.035484222912185 ; 7.289927572876178 ; 2.762388284972628 ; 6.853063287801783 ; 5.1786747419704735 ; 0.48484537426400576 ; 1.3786923756210612 ; 1.8696742613792106 ; 9.94317901154097 ; 5.206653966849669 ; 5.787895354754169 ; 7.348190582693819 ; 5.419617722295936 ; 9.131535576757685 ; 8.079201509879171 ; 4.029978306937874 ; 3.5722434282078783 ; 9.528767147108733 ; 3.4363157789255983 ; 8.65099816318328 ; 8.302777121987969 ; 5.381614492475574 ; 9.224693725672235 ; 0.9714647976501556 ; 1.0284749316074948 ; 7.015072956958257 ; 8.904798691284313 ; 1.5956030089820405 ; 2.755725448969536 ; 6.724915296568056 ; 1.6430312402017022 ; 7.013711366090863 ; 4.876352222057281 ; 6.806777681763588 ; 5.215481923258594 ; 0.4339669443408434 ; 2.2393660350197764 ; 5.752050868680129 ; 1.204336601272924 ; 5.001167138007933 ; 1.3800956825889599 ; 0.5280840108926621 ; 1.7827692253615168 ; 4.423681315127448 ; 8.775873246276348 ; 9.492641289851939 ; 4.781674167895694 ; 4.611193422864347 ; 6.37289031017357 ; 3.24607996437537 ; 1.1757809302799405 ; 0.5110099639577459 ; 6.376586528178253 ; 8.122658949111644 ; 6.702604203336357 ; 6.517677034763693 ; 4.2456894356178445 ; 6.565953361995259 ; 2.0916149886092485 ; 6.599245188671674 ; 5.296233987530145 ; 7.485203698504924 ; 0.9375685586925797 ; 7.845218499756546 ; 6.872420375766887 ; 6.950784965081013 ; 4.96866519596742 ; 9.753611270341379 ; 2.0352762060152108 ; 2.9902040965281165 ; 2.276558927941932 ; 0.4816888544201381 ; 9.03971357452612 ; 0.8010353867413278 ; 6.07216271786098 ; 6.3084670363151325 ; 3.7794193189640257 ; 0.13241011086396526 ; 8.422194118509257 ; 3.8493774606244435 ; 5.516658450763543 ; 7.105381400635508 ; 6.752788507190295 ] in 
let obs_points = List.length lx in 

(* let _ = get_samples nrm 4 0.05 obs_points in *)
(* let _ = List.map (fun x -> Float.add (Float.mul 2.0 x) 10.0) lx in *)
let ly = [ 16.445179293374885 ; 20.412792182973543 ; 1.3867127740068081 ; 6.65155432841397 ; 22.395774716146764 ; 27.502714616537155 ; 11.601475401246578 ; 29.029883075505467 ; 22.791119812271045 ; 9.240159034175136 ; 19.293147054663432 ; 12.025723995281032 ; 6.888190719132242 ; 26.975391103891706 ; 31.60630218380408 ; 8.06550995263238 ; 4.1156863827144265 ; 21.134745829555257 ; 21.897177615019153 ; 9.420279819609556 ; 23.279977462164062 ; 16.312942188006787 ; 5.061315984028079 ; 5.020367159400348 ; 6.223644227222716 ; 30.499876975798117 ; 17.66142184343259 ; 18.95263066105 ; 23.273243143344157 ; 18.36933057801813 ; 28.589955218766647 ; 26.49115257111717 ; 14.739082667260808 ; 13.075670809998696 ; 29.505829978855022 ; 13.211345093977657 ; 28.11477567779033 ; 27.741360690139054 ; 19.120563157770405 ; 29.285842477086543 ; 5.697710443760889 ; 4.376471057143893 ; 23.632066166278673 ; 27.093048248398464 ; 7.46434414084176 ; 10.293281827231286 ; 20.49646223170759 ; 7.263066821786483 ; 22.50866357275009 ; 18.746784048194563 ; 22.61785703103874 ; 19.949433035126688 ; 4.030924565157975 ; 7.855006835992938 ; 19.561784117550122 ; 5.856187417659264 ; 17.867666292233334 ; 4.579355600552771 ; 3.3323550810532216 ; 6.770187417437244 ; 15.508039575795681 ; 28.528400207836224 ; 30.805768609825545 ; 17.019507690676733 ; 15.659523727337984 ; 21.89881064558681 ; 11.354981761675656 ; 5.11802430689237 ; 3.8765690784316873 ; 21.326034900634156 ; 25.385200850402896 ; 24.339367853455272 ; 20.58163853834097 ; 13.214735432983023 ; 22.831563076762382 ; 8.803031700279945 ; 22.19119632617035 ; 17.25819532958854 ; 23.057321417243166 ; 4.593394959981668 ; 25.489979019528352 ; 22.629682117555955 ; 22.945982879973798 ; 18.146808201067465 ; 30.163140787959225 ; 6.1978197968128645 ; 10.590508787532988 ; 7.1636176052551495 ; 0.7080719676136837 ; 30.641702834246402 ; 4.581115251582509 ; 19.58968274845974 ; 20.5343121419851 ; 15.081734904014782 ; 3.527248385341278 ; 28.164378666646694 ; 13.878998002321795 ; 17.4869264586723 ; 23.190763400517405 ; 21.312777396836715 ] in


let ax = Array.of_list lx in 
let ay = Array.of_list ly in 

(*Doing the inference and computing the results.*)
let st = Unix.gettimeofday () in
let fils = (hmc (lin obs_points ax ay) 4 0.125 epochs) in
Printf.printf "Execution time: %f seconds\n" (Float.sub (Unix.gettimeofday ()) st);
let mcl = List.map (fun ls -> (List.nth ls 0, List.nth ls 1)) fils in 
let sm =  List.map (fun (ax, _) -> ax) mcl in  
let sma =  Array.of_list sm in  
let sc =  List.map (fun (_, ay) -> ay) mcl in  
let sca =  Array.of_list sc in  

let mm = Owl_stats.mean sma in 
let mc = Owl_stats.mean sca in

(* print_endline "The slope when sampled generated(original was 3):- "; *)
(* print_statistics sm; *)
(* print_normal_list sm; *)

(* print_endline "The constant when sampled generated(original was 2):- "; *)
(* print_statistics sc; *)
	
print_to_file sm "linreg_slopes.txt"; 
print_to_file sc "linreg_cons.txt"; 
(* print_normal_list sc; *)
Printf.printf "%d %f %f\n" epochs mm mc; 